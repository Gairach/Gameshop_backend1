import express from "express";
import { db } from "../firebase"; // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö firebase config
const router = express.Router();

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
router.post("/add", async (req, res) => {
  try {
    const { userId, gameId, title, price, image } = req.body;

    if (!userId) return res.status(400).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö userId" });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á
    const ownedSnapshot = await db.collection("ownedGames")
      .where("userId", "==", userId)
      .where("gameId", "==", gameId)
      .get();

    if (!ownedSnapshot.empty) {
      return res.status(400).json({ error: "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß
    const cartSnapshot = await db.collection("carts")
      .where("userId", "==", userId)
      .where("gameId", "==", gameId)
      .get();

    if (!cartSnapshot.empty) {
      return res.status(400).json({ error: "‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß" });
    }

    const cartItem = { userId, gameId, title, price, image, createdAt: new Date() };
    const ref = await db.collection("carts").add(cartItem);

    res.status(200).json({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", id: ref.id, ...cartItem });
    console.log("üõí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÇ‡∏î‡∏¢:", userId);

  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
    res.status(500).json({ error: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
  }
});

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡∏Ç‡∏≠‡∏á user
router.get("/:userId", async (req, res) => {
  try {
    const { userId } = req.params;
    const snapshot = await db.collection("carts").where("userId", "==", userId).get();

    const items = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    res.status(200).json(items);

  } catch (error) {
    console.error("‚ùå ‡∏î‡∏∂‡∏á‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
    res.status(500).json({ error: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
  }
});

// ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô
router.delete("/:cartId", async (req, res) => {
  try {
    const { cartId } = req.params;
    await db.collection("carts").doc(cartId).delete();
    res.status(200).json({ message: "‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    res.status(500).json({ error: "‡∏•‡∏ö‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
  }
});

// Checkout (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡∏°‡∏ã‡πâ‡∏≥, ‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô, ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ ownedGames)
router.post("/checkout", async (req, res) => {
  try {
    const { userId, totalAmount, discountCode } = req.body;
    if (!userId || !totalAmount)
      return res.status(400).json({ error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });

    const userRef = db.collection("users").doc(userId);
    const userDoc = await userRef.get();
    if (!userDoc.exists) return res.status(404).json({ error: "User not found" });

    let discountAmount = 0;
    let discountDoc: any = null;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (discountCode) {
      const discountSnap = await db.collection("discountCodes")
        .where("code", "==", discountCode)
        .limit(1)
        .get();

      if (discountSnap.empty)
        return res.status(404).json({ error: "‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });

      discountDoc = discountSnap.docs[0];
      const data = discountDoc.data() as any;

      if (data.status !== "active")
        return res.status(400).json({ error: "‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏" });
      if (totalAmount < data.minTotal)
        return res.status(400).json({ error: `‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ ${data.minTotal} ‡∏ö‡∏≤‡∏ó` });
      if (data.usedCount >= data.maxUses) {
        await discountDoc.ref.update({ status: "expired" });
        return res.status(400).json({ error: "‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß" });
      }

      discountAmount = data.discountAmount;
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô
    const cartSnapshot = await db.collection("carts").where("userId", "==", userId).get();
    const cartItems = cartSnapshot.docs.map(doc => ({
      id: doc.id,
      ...(doc.data() as any)
    }));

    if (cartItems.length === 0)
      return res.status(400).json({ error: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô" });

    const batch = db.batch();
    const ownedGamesRef = db.collection("ownedGames");
    const historyRef = db.collection("history");
    const gamesRef = db.collection("games");
    const usedDiscountRef = db.collection("usedDiscounts");

    // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏≠‡∏î‡∏ï‡∏¥‡∏î‡∏•‡∏ö
    let finalAmount = totalAmount - discountAmount;
    if (finalAmount < 0) finalAmount = 0;

    const wallet = userDoc.data()?.wallet || 0;
    if (wallet < finalAmount)
      return res.status(400).json({ error: "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠" });

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡∏á ownedGames
    cartItems.forEach(item => {
      const newDoc = ownedGamesRef.doc();
      batch.set(newDoc, {
        userId,
        gameId: item.gameId,
        title: item.title,
        price: item.price,
        image: item.image,
        purchasedAt: new Date().toISOString(),
      });

      // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô
      batch.delete(db.collection("carts").doc(item.id));

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
      const gameDocRef = gamesRef.doc(item.gameId);
      batch.update(gameDocRef, { salesCount: (item.salesCount || 0) + 1 });
    });

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡πÄ‡∏Å‡∏°
    const purchaseDetail = cartItems.map(i => i.title).join(", ");
    batch.set(historyRef.doc(), {
      userId,
      type: "purchase",
      detail: `‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°: ${purchaseDetail}`,
      amount: -finalAmount, // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏ö (‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏Å)
      discount: discountAmount,
      totalAmount,
      finalAmount,
      games: cartItems.map(i => ({
        gameId: i.gameId,
        title: i.title,
        price: i.price
      })),
      createdAt: new Date().toISOString(),
    });

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï wallet
    batch.update(userRef, { wallet: wallet - finalAmount });
    

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
    if (discountDoc) {
      const data = discountDoc.data() as any;
      batch.update(discountDoc.ref, {
        usedCount: data.usedCount + 1,
        status: (data.usedCount + 1 >= data.maxUses ? "expired" : "active")
      });
      batch.set(usedDiscountRef.doc(), {
        userId,
        discountId: discountDoc.id,
        discountCode,
        usedAt: new Date().toISOString()
      });
    }

    await batch.commit();

    res.json({ 
      message: "‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 
      discountAmount, 
      totalAmount, 
      finalAmount,
      newWallet: wallet - finalAmount
    });

  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" });
  }
});




export default router;
